name: Release

on:
  push:
    branches:
      - main
    paths:
      - .github/workflows/release.yml
      - "**.nix"
      - flake.lock

env:
  REGISTRY: ghcr.io

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Nix
        uses: cachix/install-nix-action@v31
      - name: Check Flake
        run: nix flake check

  get-images:
    needs: check
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.get-images.outputs.images }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Nix
        uses: cachix/install-nix-action@v31
      - id: get-images
        run: |
          nix flake show --json --quiet --quiet \
            | jq -r '.packages["x86_64-linux"] | delpaths([["default"],["geolite2"],["trivy-scan"]]) | keys | "images=" + (. | tostring)' \
            >> $GITHUB_OUTPUT

  build-and-push:
    needs: get-images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.get-images.outputs.images) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Nix
        uses: cachix/install-nix-action@v31
      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push ${{ matrix.image }}
        run: |
          REGEX_GOACCESS_TO_LATEST='s/^\(.*:\)[0-9]\+\(\.[0-9]\+\)\{2\}\(.*\)$/\1latest\3/'
          REPO="${{ env.REGISTRY }}/${{ github.repository }}"
          ID=$(nix run ".#${{ matrix.image }}.copyToDockerDaemon" | grep "Copy to Docker daemon" | cut -d' ' -f6)
          ID_LATEST_GOACCESS=$(sed $REGEX_GOACCESS_TO_LATEST <<< $ID)
          TAG="$REPO/$ID"
          TAG_LATEST_GOACCESS="$REPO/$ID_LATEST_GOACCESS"

          docker tag "$ID" "$TAG"
          docker tag "$ID" "$TAG_LATEST_GOACCESS"
          docker push "$TAG"
          docker push "$TAG_LATEST_GOACCESS"

          if [[ "$ID" =~ geolite2(-[0-9]+){3} ]]; then
            ID_LATEST_GEOLITE2=$(sed 's/\(.*\)\(geolite2\)\(-[0-9]\+\)\{3\}\(.*\)/\1\2\4/' <<< $ID)
            ID_LATEST_ALL=$(sed $REGEX_GOACCESS_TO_LATEST <<< $ID_LATEST_GEOLITE2)
            TAG_LATEST_GEOLITE2="$REPO/$ID_LATEST_GEOLITE2"
            TAG_LATEST_ALL="$REPO/$ID_LATEST_ALL"

            docker tag "$ID" "$TAG_LATEST_GEOLITE2"
            docker tag "$ID" "$TAG_LATEST_ALL"
            docker push "$TAG_LATEST_GEOLITE2"
            docker push "$TAG_LATEST_ALL"
          fi
